<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\LPC17xx-uCos-II-Mould.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\LPC17xx-uCos-II-Mould.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Apr 02 11:11:51 2018
<BR><P>
<H3>Maximum Stack Usage =        496 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTask_Kbd &rArr; PorcKey &rArr; PorcEnterKey &rArr; SetEnterTime &rArr; EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[31b]">__user_initial_stackheap</a>
 <LI><a href="#[1ab]">CPU_IntDis</a>
 <LI><a href="#[36f]">CPU_IntEn</a>
 <LI><a href="#[370]">CPU_SR_Save</a>
 <LI><a href="#[371]">CPU_SR_Restore</a>
 <LI><a href="#[372]">CPU_CntLeadZeros</a>
 <LI><a href="#[373]">CPU_RevBits</a>
 <LI><a href="#[374]">CPU_WaitForInt</a>
 <LI><a href="#[375]">CPU_WaitForExcept</a>
 <LI><a href="#[f8]">OS_CPU_SR_Save</a>
 <LI><a href="#[fa]">OS_CPU_SR_Restore</a>
 <LI><a href="#[11f]">OSStartHighRdy</a>
 <LI><a href="#[fe]">OSCtxSw</a>
 <LI><a href="#[11b]">OSIntCtxSw</a>
 <LI><a href="#[29]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">NMI_Handler</a><BR>
 <LI><a href="#[23]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">HardFault_Handler</a><BR>
 <LI><a href="#[24]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">MemManage_Handler</a><BR>
 <LI><a href="#[25]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">BusFault_Handler</a><BR>
 <LI><a href="#[26]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">UsageFault_Handler</a><BR>
 <LI><a href="#[27]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">SVC_Handler</a><BR>
 <LI><a href="#[28]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">DebugMon_Handler</a><BR>
 <LI><a href="#[41]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[56]">AppTask_DataGather_PineTempCtrl</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[55]">AppTask_HistoryMemoryRead</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[53]">AppTask_Kbd</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[54]">AppTask_Meas</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[52]">AppTask_ModbusSlave</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[57]">AppTask_Refresh_Lcd_AnalogOutput</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[58]">AppTask_Start</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[42]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4d]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[44]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[45]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3d]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3e]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3f]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[40]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[47]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">I2C1_IRQHandler</a> from i2c.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[46]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[49]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">MaskWriteReg2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[24]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">NoDataPRASD</a> from mb_mfunction.o(.text) referenced 10 times from mb_mfunction.o(.data)
 <LI><a href="#[50]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[51]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[29]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10a]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[104]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[3b]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4b]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4a]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[48]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3c]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">ReadCoils2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[b]">ReadDiscreteInputs2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[14]">ReadDiscretePRASD</a> from mb_mfunction.o(.text) referenced 4 times from mb_mfunction.o(.data)
 <LI><a href="#[c]">ReadHoldReg2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[d]">ReadInputReg2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[15]">ReadRegPRASD</a> from mb_mfunction.o(.text) referenced 6 times from mb_mfunction.o(.data)
 <LI><a href="#[13]">ReadWriteMultipleReg2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[21]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3a]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[2c]">TIMER0_IRQHandler</a> from times.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">TIMER1_IRQHandler</a> from times.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">TIMER2_IRQHandler</a> from times.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">TIMER3_IRQHandler</a> from porttimer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">UART0_IRQHandler</a> from uarts.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">UART1_IRQHandler</a> from uarts.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">UART2_IRQHandler</a> from uarts.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">UART3_IRQHandler</a> from uarts.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4c]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[43]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">WriteMultipleCoils2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[11]">WriteMultipleReg2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[e]">WriteSingleCoil2PDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[f]">WriteSingleRegPDU</a> from mb_mfunction.o(.text) referenced 2 times from mb_mfunction.o(.data)
 <LI><a href="#[66]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[65]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[1d]">eMBFuncReadCoils</a> from mbfunccoils.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[20]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[19]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[18]">eMBFuncReadInputRegister</a> from mbfuncinput.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[1c]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[17]">eMBFuncReportSlaveID</a> from mbfuncother.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[1e]">eMBFuncWriteCoil</a> from mbfunccoils.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[1b]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[1f]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[1a]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[5c]">eMBRTUReceive</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[5b]">eMBRTUSend</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[59]">eMBRTUStart</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[5a]">eMBRTUStop</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[62]">eMBTCPReceive</a> from mbtcp.o(.text) referenced from mb.o(.text)
 <LI><a href="#[63]">eMBTCPSend</a> from mbtcp.o(.text) referenced from mb.o(.text)
 <LI><a href="#[60]">eMBTCPStart</a> from mbtcp.o(.text) referenced from mb.o(.text)
 <LI><a href="#[61]">eMBTCPStop</a> from mbtcp.o(.text) referenced from mb.o(.text)
 <LI><a href="#[64]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[5d]">xMBRTUReceiveFSM</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[5f]">xMBRTUTimerT35Expired</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[5e]">xMBRTUTransmitFSM</a> from mbrtu.o(.text) referenced from mb.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[69]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[34a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34c]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[34d]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[34e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[305]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[34f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[75]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[350]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[351]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[352]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[353]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[354]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[355]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[356]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[70]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[357]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[358]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[359]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[35a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[35c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[35d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[35e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[35f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[360]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[361]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[362]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[363]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[364]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[365]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[366]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[367]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[368]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[369]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[68]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[36a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[72]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[74]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[36b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[76]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[36c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[31c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[79]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[36d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[22]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[7e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[41]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ab]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36f]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[fa]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[11f]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[fe]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[11b]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[29]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2eb]"></a>EnterCriticalSection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegisterCB
</UL>

<P><STRONG><a name="[2ec]"></a>ExitCriticalSection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegisterCB
</UL>

<P><STRONG><a name="[376]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[379]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[37b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[81]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[80]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
</UL>

<P><STRONG><a name="[a1]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[37c]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit_w5100
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIOIint
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasPowerInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerIOInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTORIOInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2IOInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1IOInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDIOInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIOInit
</UL>

<P><STRONG><a name="[84]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_SHELL
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_WR
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit_w5100
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIOIint
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD1698
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutOffMeasBoard
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMOTOR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSWI2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSWI1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLED
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPIRcvByte
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPISendData
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_64k
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_1sec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
</UL>

<P><STRONG><a name="[85]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_SHELL
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_WR
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit_w5100
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD1698
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMOTOR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSWI2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSWI1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLED
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPIRcvByte
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPISendData
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_64k
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_1sec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
</UL>

<P><STRONG><a name="[86]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_IntCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_IntCmd
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_GetIntStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_GetIntStatus
</UL>

<P><STRONG><a name="[90]"></a>GPIO_ClearInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearInt
</UL>

<P><STRONG><a name="[87]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[88]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[89]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[8a]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[8b]"></a>FIO_IntCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[8d]"></a>FIO_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
</UL>

<P><STRONG><a name="[8f]"></a>FIO_ClearInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>

<P><STRONG><a name="[91]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FIO_SetMask
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIOIint
</UL>

<P><STRONG><a name="[92]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[94]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[95]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[96]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[97]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[98]"></a>FIO_ByteSetDir</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[9a]"></a>FIO_ByteSetMask</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[9b]"></a>FIO_ByteSetValue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[9c]"></a>FIO_ByteClearValue</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[9d]"></a>FIO_ByteReadValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[a0]"></a>I2C_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; I2C_SetClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Init
</UL>

<P><STRONG><a name="[a3]"></a>I2C_DeInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[a4]"></a>I2C_Cmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Init
</UL>

<P><STRONG><a name="[a5]"></a>I2C_IntCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[a8]"></a>I2C_MasterHandler</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterHandler &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>I2C_SlaveHandler</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[ac]"></a>I2C_MasterTransferData</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>

<P><STRONG><a name="[b0]"></a>I2C_SlaveTransferData</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[b1]"></a>I2C_SetOwnSlaveAddr</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b2]"></a>I2C_MonitorModeConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b3]"></a>I2C_MonitorModeCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b4]"></a>I2C_MonitorGetDatabuffer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[380]"></a>I2C_MonitorHandler</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>I2C_MasterTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterTransferComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>I2C_SlaveTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[381]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit_w5100
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Init
</UL>

<P><STRONG><a name="[bb]"></a>RTC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[bc]"></a>RTC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[bd]"></a>RTC_ResetClockTickCounter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ResetClockTickCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[be]"></a>RTC_Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[bf]"></a>RTC_CntIncrIntConfig</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_CntIncrIntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[c0]"></a>RTC_AlarmIntConfig</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AlarmIntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[c1]"></a>RTC_SetTime</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEnterTime
</UL>

<P><STRONG><a name="[c2]"></a>RTC_GetTime</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c3]"></a>RTC_SetFullTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c4]"></a>RTC_GetFullTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetFullTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[c5]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetAlarmTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[383]"></a>RTC_GetAlarmTime</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>RTC_SetFullAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c7]"></a>RTC_GetFullAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c8]"></a>RTC_GetIntPending</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>RTC_ClearIntPending</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ClearIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>RTC_CalibCounterCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_CalibCounterCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[cb]"></a>RTC_CalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[cc]"></a>RTC_WriteGPREG</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[cd]"></a>RTC_ReadGPREG</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[d1]"></a>TIM_GetIntStatus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>TIM_GetIntCaptureStatus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[d3]"></a>TIM_ClearIntPending</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ClearIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start10mS
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[d4]"></a>TIM_ClearIntCapturePending</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[384]"></a>TIM_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>TIM_Init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[d7]"></a>TIM_DeInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[d8]"></a>TIM_Cmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start10mS
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[d9]"></a>TIM_ResetCounter</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ResetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start10mS
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[da]"></a>TIM_ConfigMatch</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[db]"></a>TIM_UpdateMatchValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[dc]"></a>TIM_ConfigCapture</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[dd]"></a>TIM_GetCaptureValue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[df]"></a>UART_Init</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[e0]"></a>UART_TxCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortClose
</UL>

<P><STRONG><a name="[e1]"></a>UART_DeInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[1b4]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[1b9]"></a>UART_CheckBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntTransmit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IntTransmit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
</UL>

<P><STRONG><a name="[e2]"></a>UART_SendByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
</UL>

<P><STRONG><a name="[e3]"></a>UART_ReceiveByte</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>

<P><STRONG><a name="[e4]"></a>UART_Send</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntTransmit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IntTransmit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUserBuffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserBuffer
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InquiryUserBufferState
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRangeSel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRLS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIoutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIIput
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLInput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCCOutput
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCMOutput
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCMSampling
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCSSampling
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationSet
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDpro
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKpro
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest
</UL>

<P><STRONG><a name="[e5]"></a>UART_Receive</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntReceive
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IntReceive
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntReceive
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntReceive
</UL>

<P><STRONG><a name="[e6]"></a>UART_ForceBreak</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[e7]"></a>UART_IntConfig</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Receive
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntTransmit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Receive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IntTransmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Receive
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Send
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Receive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Send
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortClose
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[e8]"></a>UART_GetLineStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>UART_GetIntId</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetIntId
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>UART_FIFOConfig</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_FIFOConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[1b5]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[eb]"></a>UART_ABCmd</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ec]"></a>UART_ABClearIntPending</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ed]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ee]"></a>UART_IrDACmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ef]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[f0]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[f1]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[f2]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[f3]"></a>UART_RS485Config</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[385]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>UART_RS485Send</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[f5]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[f6]"></a>UART_RS485SendData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[f9]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
</UL>

<P><STRONG><a name="[f7]"></a>OSEventNameGet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[fb]"></a>OSEventNameSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[101]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[fc]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[100]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[ff]"></a>OSEventPendMulti</STRONG> (Thumb, 710 bytes, Stack size 64 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[102]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[104]"></a>OS_TaskStat</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[110]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[386]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[11c]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[11d]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[11e]"></a>OSStart</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[121]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[387]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[124]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[123]"></a>OS_EventTaskRdy</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[139]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[136]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>

<P><STRONG><a name="[167]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[125]"></a>OS_TCBInit</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[128]"></a>OSFlagAccept</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[129]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[12b]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[12c]"></a>OSFlagDel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[12d]"></a>OSFlagNameGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[12e]"></a>OSFlagNameSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[12f]"></a>OSFlagPend</STRONG> (Thumb, 614 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[131]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[132]"></a>OSFlagPost</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[133]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[114]"></a>OS_FlagInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[134]"></a>OSMboxAccept</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[135]"></a>OSMboxCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBMasterIni
</UL>

<P><STRONG><a name="[137]"></a>OSMboxDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[138]"></a>OSMboxPend</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[13a]"></a>OSMboxPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[13b]"></a>OSMboxPost</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[13c]"></a>OSMboxPostOpt</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[13d]"></a>OSMboxQuery</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[13e]"></a>OSMemCreate</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[13f]"></a>OSMemGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[140]"></a>OSMemNameGet</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[141]"></a>OSMemNameSet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[142]"></a>OSMemPut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[143]"></a>OSMemQuery</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[115]"></a>OS_MemInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[144]"></a>OSMutexAccept</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[145]"></a>OSMutexCreate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[146]"></a>OSMutexDel</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[148]"></a>OSMutexPend</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Kbd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysRecord
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecordFlash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
</UL>

<P><STRONG><a name="[149]"></a>OSMutexPost</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Kbd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysRecord
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecordFlash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
</UL>

<P><STRONG><a name="[14a]"></a>OSMutexQuery</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[14b]"></a>OSQAccept</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[14c]"></a>OSQCreate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[14d]"></a>OSQDel</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[14e]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[14f]"></a>OSQPend</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[150]"></a>OSQPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[151]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[152]"></a>OSQPostFront</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[153]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[154]"></a>OSQQuery</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[116]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[155]"></a>OSSemAccept</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[156]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBMasterIni
</UL>

<P><STRONG><a name="[157]"></a>OSSemDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[158]"></a>OSSemPend</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[159]"></a>OSSemPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[15a]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time10mSHandle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T35EndHandle
</UL>

<P><STRONG><a name="[15b]"></a>OSSemQuery</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[15c]"></a>OSSemSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[15d]"></a>OSTaskChangePrio</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[15e]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[160]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[109]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Create
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[161]"></a>OSTaskDel</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[164]"></a>OSTaskDelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[165]"></a>OSTaskResume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[103]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[106]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[166]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[168]"></a>OSTaskRegGet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[169]"></a>OSTaskRegSet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16a]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[105]"></a>OSTimeDly</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Kbd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
</UL>

<P><STRONG><a name="[16c]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_SHELL
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[16d]"></a>OSTimeDlyResume</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[16e]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16f]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[170]"></a>OSTmrCreate</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[172]"></a>OSTmrDel</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[175]"></a>OSTmrNameGet</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[176]"></a>OSTmrRemainGet</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[177]"></a>OSTmrStateGet</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[178]"></a>OSTmrStart</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[17a]"></a>OSTmrStop</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[17b]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[117]"></a>OSTmr_Init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[111]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[118]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[127]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[163]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[10b]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[107]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[15f]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[50]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[122]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[2a]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[77]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b1]"></a>OSModbusServe</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[9f]"></a>check_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemGetStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemConfigMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemForcePinState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAPulseDivConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDACmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAInvtInputCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABClearIntPending
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ForceBreak
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCaptureValue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigCapture
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateMatchValue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntCapturePending
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntCaptureStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibCounterCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearIntPending
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetIntPending
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullAlarmTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullAlarmTime
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullTime
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmIntConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CntIncrIntConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MonitorGetDatabuffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MonitorModeCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MonitorModeConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetOwnSlaveAddr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[17d]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[17e]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[17f]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[16b]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[180]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[181]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[182]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[183]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[1c0]"></a>UART_IntErr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uarts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>Uart0Init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Uart0Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[1b8]"></a>UART0_IntTransmit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART0_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Send
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>UART0_IntReceive</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_IntReceive &rArr; UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>UART0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART0_IRQHandler &rArr; UART0_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntReceive
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>UART0Send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
</UL>

<P><STRONG><a name="[1bc]"></a>UART0Receive</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>

<P><STRONG><a name="[1bd]"></a>Uart1Init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[1be]"></a>UART1_IntTransmit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART1_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>UART1_IntReceive</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_IntReceive &rArr; UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>UART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART1_IRQHandler &rArr; UART1_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntErr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>UART1Send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
</UL>

<P><STRONG><a name="[1c2]"></a>UART1Receive</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>

<P><STRONG><a name="[1c3]"></a>Uart2Init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Uart2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutUart
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[1c4]"></a>UART2_IntTransmit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART2_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Send
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[32]"></a>UART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART2_IRQHandler &rArr; UART2_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IntTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>UART2_IntReceive</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[1c8]"></a>UART2Send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART2Send &rArr; UART2_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IntTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[1c9]"></a>UART2Receive</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>

<P><STRONG><a name="[1ca]"></a>Uart3Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Uart3Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniUART1
</UL>

<P><STRONG><a name="[1cb]"></a>UART3_IntTransmit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART3_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Send
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[1cc]"></a>UART3_IntReceive</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART3_IntReceive &rArr; UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceOneChar
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>UART3_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART3_IRQHandler &rArr; UART3_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntReceive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntTransmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntErr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>UART3Send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntTransmit
</UL>

<P><STRONG><a name="[1cf]"></a>UART3Receive</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>

<P><STRONG><a name="[1d0]"></a>SetOutUart</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
</UL>

<P><STRONG><a name="[1d1]"></a>Time0Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Time0Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[2c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER0_IRQHandler &rArr; SetBuzzer &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>Time1Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, times.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[2d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TIMER1_IRQHandler &rArr; Time10mSHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time10mSHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d7]"></a>Time2Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Time2Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[1d8]"></a>ModbusProc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ModbusProc &rArr; T35_Exception &rArr; T35EndHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T35_Exception
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T15_Exception
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T10ms_Exception
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[2e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TIMER2_IRQHandler &rArr; ModbusProc &rArr; T35_Exception &rArr; T35EndHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>Time3Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, times.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[1dd]"></a>KeyIOInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyIOInit &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[1de]"></a>LEDIOInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDIOInit &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[1df]"></a>SetLED</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1e0]"></a>SWI1IOInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[1e1]"></a>SetSWI1</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1e2]"></a>SWI2IOInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[1e3]"></a>SetSWI2</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1e4]"></a>MOTORIOInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[1e5]"></a>SetMOTOR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1e6]"></a>BuzzerIOInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BuzzerIOInit &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[1e7]"></a>MeasPowerInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[1d4]"></a>SetBuzzer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBuzzer &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>BuzzerCtrl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[1e8]"></a>CutOffMeasBoard</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100uS
</UL>

<P><STRONG><a name="[1ea]"></a>I2C1Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C1Init &rArr; I2C_Init &rArr; I2C_SetClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[36]"></a>I2C1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C1_IRQHandler &rArr; I2C_MasterHandler &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferComplete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>C1025_WriteByte</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCaliParTime
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEscKey
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData16
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
</UL>

<P><STRONG><a name="[1ed]"></a>C1025_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCaliParTime
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData16
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordDetail
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordSimple
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[1ee]"></a>WriteData16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteData16 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCaliParTime
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
</UL>

<P><STRONG><a name="[1ef]"></a>ReadData16</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadData16 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCaliParTime
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordDetail
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordSimple
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[1f0]"></a>WriteData32</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteData32 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
</UL>

<P><STRONG><a name="[1f1]"></a>ReadData32</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadData32 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
</UL>

<P><STRONG><a name="[1f2]"></a>WriteFp32</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteFp32 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToChArray
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEscKey
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
</UL>

<P><STRONG><a name="[1f4]"></a>ReadFp32</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadFp32 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChArrayToFloat
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordDetail
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordSimple
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[1e9]"></a>Delay100uS</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutOffMeasBoard
</UL>

<P><STRONG><a name="[388]"></a>DelayuS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>Delay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>

<P><STRONG><a name="[389]"></a>Uint16ToMod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>ModToUint16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>LongIntegerToBit</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LongIntegerToBit
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
</UL>

<P><STRONG><a name="[38b]"></a>IntegerToBitAscii</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>disSeondTime</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>FloatToChArray</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FloatToChArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDatChange
</UL>

<P><STRONG><a name="[38d]"></a>Float64ToChArray</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>ChArrayToFloat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChArrayToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
</UL>

<P><STRONG><a name="[38e]"></a>Int16ArrayToFloat</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>AverageSelectUint16</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>AverageSelectFp</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1f8]"></a>MovingAverage</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[390]"></a>LzgCStrlen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, public.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>LzgChineselen</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LzgChineselen
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[240]"></a>StringLen</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[2c3]"></a>StrCopyStr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StrCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealYMD
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealIP
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealHMS
</UL>

<P><STRONG><a name="[1f9]"></a>MachineFristRun</STRONG> (Thumb, 584 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MachineFristRun &rArr; ReadFp32 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVLCD
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100uS
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[1fc]"></a>ComeBackConfig</STRONG> (Thumb, 988 bytes, Stack size 48 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ComeBackConfig &rArr; ReadFp32 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVLCD
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCaliDat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100uS
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[1a5]"></a>InitDevice1</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = InitDevice1 &rArr; ComeBackConfig &rArr; ReadFp32 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write240x160
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit_w5100
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBMasterIni
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIOIint
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD1698
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData32
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100uS
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerIOInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDIOInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIOInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[1a9]"></a>InitDevice2</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = InitDevice2 &rArr; WriteData32 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSysDatChange
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[210]"></a>FindUpId</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindUpId
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[216]"></a>FindDownId</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FindDownId
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[21e]"></a>FindEnterId</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindEnterId
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
</UL>

<P><STRONG><a name="[220]"></a>SaveHistoryMenu</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SaveHistoryMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
</UL>

<P><STRONG><a name="[20d]"></a>ReadHistoryMenu</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadHistoryMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReturnId
</UL>

<P><STRONG><a name="[20c]"></a>FindReturnId</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindReturnId &rArr; ReadHistoryMenu
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
</UL>

<P><STRONG><a name="[20f]"></a>FindLab</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindLab
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[20e]"></a>UpKeyAutoPorc</STRONG> (Thumb, 2052 bytes, Stack size 144 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = UpKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic56x56
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLab
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDownId
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUpId
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzgChineselen
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[21c]"></a>DownKeyAutoPorc</STRONG> (Thumb, 2080 bytes, Stack size 144 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DownKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic56x56
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLab
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDownId
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUpId
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzgChineselen
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
</UL>

<P><STRONG><a name="[21d]"></a>EnterKeyAutoPorc</STRONG> (Thumb, 1328 bytes, Stack size 88 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = EnterKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic56x56
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwButton
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLab
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryMenu
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEnterId
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDownId
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzgChineselen
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[221]"></a>EscKeyAutoPorc</STRONG> (Thumb, 1040 bytes, Stack size 96 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic56x56
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwButton
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLab
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReturnId
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDownId
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUpId
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzgChineselen
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEnterTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEscKey
</UL>

<P><STRONG><a name="[222]"></a>PorcUpKey</STRONG> (Thumb, 2522 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = PorcUpKey &rArr; UpKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpIp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVLCD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[229]"></a>PorcDownKey</STRONG> (Thumb, 2732 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = PorcDownKey &rArr; DownKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownIp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVLCD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[22c]"></a>PorcEscKey</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = PorcEscKey &rArr; EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[22d]"></a>ReadCaliParTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadCaliParTime &rArr; ReadData16 &rArr; C1025_ReadByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData16
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[22e]"></a>WriteCaliParTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WriteCaliParTime &rArr; WriteData16 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData16
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[22f]"></a>check</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[20b]"></a>WriteSysRecord</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WriteSysRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_WR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[231]"></a>SetPro</STRONG> (Thumb, 3142 bytes, Stack size 72 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SetPro &rArr; WriteCaliParTime &rArr; WriteData16 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindOriginalDat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCaliParTime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCaliDat
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSysDatChange
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[234]"></a>PorcEnterKey</STRONG> (Thumb, 6906 bytes, Stack size 88 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = PorcEnterKey &rArr; SetEnterTime &rArr; EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerCtrl
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSysRecord
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEnterTime
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuFormHoldreg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRectangular
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList126
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealYMD
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealIP
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealHMS
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwButton
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCaliParTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCaliParTime
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCaliDat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSysDatChange
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData32
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[24e]"></a>KeyScan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyScan &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[19d]"></a>PorcKey</STRONG> (Thumb, 1246 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = PorcKey &rArr; PorcEnterKey &rArr; SetEnterTime &rArr; EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerCtrl
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRightIp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEscKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSysDatChange
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Kbd
</UL>

<P><STRONG><a name="[3c]"></a>RTC_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; RTC_ClearIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearIntPending
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetIntPending
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[200]"></a>RTCInit</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTCInit &rArr; RTC_CalibCounterCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibCounterCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmIntConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CntIncrIntConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[252]"></a>DelayLCD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD1698
</UL>

<P><STRONG><a name="[1fe]"></a>LCDIOIint</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCDIOIint &rArr; FIO_SetMask
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[251]"></a>LCDWrite</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCDWrite &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_ADDRESS
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVLCD
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD1698
</UL>

<P><STRONG><a name="[1fb]"></a>SetVLCD</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetVLCD &rArr; LCDWrite &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
</UL>

<P><STRONG><a name="[201]"></a>InitLCD1698</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitLCD1698 &rArr; LCDWrite &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[253]"></a>RAM_ADDRESS</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RAM_ADDRESS &rArr; LCDWrite &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
</UL>

<P><STRONG><a name="[202]"></a>LcdClr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LcdClr &rArr; RAM_ADDRESS &rArr; LCDWrite &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_ADDRESS
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[203]"></a>ClrDisBuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClrDisBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisPleaseWait
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[206]"></a>LcdUpdata</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LcdUpdata &rArr; LCDWrite &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisPleaseWait
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[255]"></a>LcdReadByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCoord
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwVLine
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwHLine
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1212
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwButton
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
</UL>

<P><STRONG><a name="[254]"></a>LcdWriteByte</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCoord
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwVLine
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwHLine
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf2412
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1616
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1212
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic40x16
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic56x56
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwButton
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write240x160
</UL>

<P><STRONG><a name="[217]"></a>pic56x56</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pic56x56 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[256]"></a>pic40x16</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
</UL>

<P><STRONG><a name="[257]"></a>DisBuf168</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DisBuf168 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisStr168
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList168
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
</UL>

<P><STRONG><a name="[258]"></a>DisBuf126</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisBuf126 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyWord1212
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList126
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
</UL>

<P><STRONG><a name="[259]"></a>DisBuf1212</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisBuf1212 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyWord1212
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
</UL>

<P><STRONG><a name="[25a]"></a>DisBuf1616</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DisBuf1616 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disppb_En1616
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
</UL>

<P><STRONG><a name="[25b]"></a>DisBuf2412</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DisBuf2412 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disppb_En2412
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisUg_M3_En2412
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList2412
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
</UL>

<P><STRONG><a name="[25c]"></a>DisCList12</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DisCList12 &rArr; DisBuf1212 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1212
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCoord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
</UL>

<P><STRONG><a name="[215]"></a>DisCList16</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1616
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disppb_En1616
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanHei2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateSwitch2
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateSwitch
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpIp
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownIp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
</UL>

<P><STRONG><a name="[24c]"></a>DisEList126</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DisEList126 &rArr; DisBuf126 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[25f]"></a>DisEList168</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisPleaseWait
</UL>

<P><STRONG><a name="[260]"></a>DisStr168</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
</UL>

<P><STRONG><a name="[261]"></a>DisEList2412</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DisEList2412 &rArr; DisBuf2412 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf2412
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disppb_En2412
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisUg_M3_En2412
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
</UL>

<P><STRONG><a name="[241]"></a>ReverseVideo</STRONG> (Thumb, 222 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReverseVideo &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpIp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRightIp
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEnterTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownIp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[212]"></a>CleanVideo</STRONG> (Thumb, 194 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CleanVideo &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownTime
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[211]"></a>CReverseVideo</STRONG> (Thumb, 244 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CReverseVideo &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateSwitch2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanHei
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
</UL>

<P><STRONG><a name="[262]"></a>DarwHLine</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DarwHLine &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCoord
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRectangular
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
</UL>

<P><STRONG><a name="[263]"></a>DarwVLine</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DarwVLine &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCoord
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRectangular
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwScrollBar
</UL>

<P><STRONG><a name="[21f]"></a>DarwButton</STRONG> (Thumb, 634 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DarwButton &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
</UL>

<P><STRONG><a name="[213]"></a>DarwScrollBar</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DarwScrollBar &rArr; CleanVideo &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwVLine
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwHLine
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[248]"></a>DrawRectangular</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DrawRectangular &rArr; DarwVLine &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwVLine
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[264]"></a>DisTime</STRONG> (Thumb, 468 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DisTime &rArr; DisBuf126 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSysRecord
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[244]"></a>DisDate</STRONG> (Thumb, 768 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DisDate &rArr; DisBuf126 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSysRecord
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[265]"></a>GetNumLen</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetNumLen &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
</UL>

<P><STRONG><a name="[26a]"></a>Num10n</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
</UL>

<P><STRONG><a name="[266]"></a>DisUg_M3_En2412</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DisUg_M3_En2412 &rArr; DisEList2412 &rArr; DisBuf2412 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList2412
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf2412
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
</UL>

<P><STRONG><a name="[267]"></a>WriteMyWord1212</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteMyWord1212 &rArr; DisBuf1212 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1212
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
</UL>

<P><STRONG><a name="[235]"></a>WriteCode1212</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1212
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowEeor
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSysRecord
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[269]"></a>DisValue2</STRONG> (Thumb, 1648 bytes, Stack size 96 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyWord1212
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisUg_M3_En2412
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num10n
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList2412
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf2412
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongIntegerToBit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
</UL>

<P><STRONG><a name="[243]"></a>DisValue</STRONG> (Thumb, 1306 bytes, Stack size 104 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = DisValue &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num10n
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList2412
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf2412
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf126
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf168
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongIntegerToBit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
</UL>

<P><STRONG><a name="[205]"></a>Write240x160</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Write240x160 &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[26e]"></a>DisConfigStateSwitch</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisConfigStateSwitch &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
</UL>

<P><STRONG><a name="[26f]"></a>DisConfigStateValue</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = DisConfigStateValue &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
</UL>

<P><STRONG><a name="[270]"></a>FanHei</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FanHei &rArr; CReverseVideo &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
</UL>

<P><STRONG><a name="[271]"></a>DisConfigStateSwitch2</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisConfigStateSwitch2 &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
</UL>

<P><STRONG><a name="[272]"></a>FanHei2</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FanHei2 &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
</UL>

<P><STRONG><a name="[24f]"></a>DisConfigState</STRONG> (Thumb, 3700 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = DisConfigState &rArr; DisConfigStateValue &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanHei2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateSwitch2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanHei
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateSwitch
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[273]"></a>ShowCoord</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwVLine
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwHLine
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteByte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadByte
</UL>

<P><STRONG><a name="[274]"></a>Disppb_En2412</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList2412
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf2412
</UL>

<P><STRONG><a name="[275]"></a>Disppb_En1616</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisBuf1616
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
</UL>

<P><STRONG><a name="[236]"></a>prompt</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = prompt &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DarwHLine
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEnterTime
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[276]"></a>DisPleaseWait</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEList168
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDisBuf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[21b]"></a>MainMenuSen</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MainMenuSen &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[21a]"></a>MainMenuSen2</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[23f]"></a>OutputStation</STRONG> (Thumb, 644 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = OutputStation &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[23e]"></a>SensorMenu</STRONG> (Thumb, 894 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SensorMenu &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADValue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[279]"></a>DisHexDat</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisHexDat
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
</UL>

<P><STRONG><a name="[278]"></a>ShowEeor</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ShowEeor &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
</UL>

<P><STRONG><a name="[29b]"></a>ErrDatChange</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
</UL>

<P><STRONG><a name="[219]"></a>MainMenuSta</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MainMenuSta &rArr; prompt &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowEeor
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisHexDat
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[218]"></a>MainMenu</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MainMenu &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterKeyAutoPorc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownKeyAutoPorc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpKeyAutoPorc
</UL>

<P><STRONG><a name="[187]"></a>Menm0Updata</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Menm0Updata &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
</UL>

<P><STRONG><a name="[27a]"></a>showCountDat</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = showCountDat &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLcdVol
</UL>

<P><STRONG><a name="[18c]"></a>NewLcdVol</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = NewLcdVol &rArr; showCountDat &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
</UL>

<P><STRONG><a name="[391]"></a>SetHoldregToE2rom</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>GetHoldregFormE2rom</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>GetMenuFormHoldreg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[24b]"></a>SetMenuList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[27b]"></a>CheackDat</STRONG> (Thumb, 714 bytes, Stack size 32 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUserBuffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserBuffer
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InquiryUserBufferState
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRangeSel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRLS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIoutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIIput
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLInput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCCOutput
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCMOutput
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCMSampling
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCSSampling
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationSet
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDpro
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKpro
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest
</UL>

<P><STRONG><a name="[27d]"></a>CleanSent_Buffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fpga_contorl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUserBuffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserBuffer
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InquiryUserBufferState
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRangeSel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRLS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIoutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIIput
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLInput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCCOutput
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCMOutput
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCMSampling
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCSSampling
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationSet
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDpro
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKpro
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest
</UL>

<P><STRONG><a name="[27e]"></a>CleanRbrx</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpga_contorl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUserBuffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserBuffer
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InquiryUserBufferState
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRangeSel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRLS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIoutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIIput
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLInput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCCOutput
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCMOutput
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCMSampling
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCSSampling
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationSet
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDpro
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKpro
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest
</UL>

<P><STRONG><a name="[27c]"></a>Rest</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Rest &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
</UL>

<P><STRONG><a name="[27f]"></a>ACKpro</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[280]"></a>ENDpro</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[281]"></a>DatChange</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fpga_contorl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUserBuffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserBuffer
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferStatus
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCCOutput
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DASCMOutput
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCMSampling
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCSSampling
</UL>

<P><STRONG><a name="[239]"></a>Rotary</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Rotary &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[23a]"></a>MotorCtrl</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MotorCtrl &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[282]"></a>CommunicationSet</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[283]"></a>ADMCSSampling</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ADMCSSampling &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
</UL>

<P><STRONG><a name="[284]"></a>ADMCMSampling</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[198]"></a>DAMCSOutPutSetOne</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAMCSOutPutSetOne &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[199]"></a>DAMCSOutPutAll</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DAMCSOutPutAll &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[285]"></a>DASCMOutput</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[286]"></a>DASCCOutput</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[287]"></a>TTLInput</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[193]"></a>TTLOutput</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TTLOutput &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[288]"></a>SPIIput</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[289]"></a>SPIoutput</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[28a]"></a>ADBufferStatus</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ADBufferStatus &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
</UL>

<P><STRONG><a name="[28b]"></a>ADBufferRead</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ADBufferRead &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
</UL>

<P><STRONG><a name="[28c]"></a>ADBufferRLS</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ADBufferRLS &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
</UL>

<P><STRONG><a name="[28d]"></a>ADRangeSel</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ADRangeSel &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
</UL>

<P><STRONG><a name="[23d]"></a>CountCtrl</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CountCtrl &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[188]"></a>CountRead</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CountRead &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
</UL>

<P><STRONG><a name="[28e]"></a>InquiryUserBufferState</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[28f]"></a>ReadUserBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[290]"></a>WriteUserBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatChange
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanRbrx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSent_Buffer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackDat
</UL>

<P><STRONG><a name="[291]"></a>AverT</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AverT &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
</UL>

<P><STRONG><a name="[292]"></a>AverP</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AverP &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
</UL>

<P><STRONG><a name="[293]"></a>AverL</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AverL &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
</UL>

<P><STRONG><a name="[294]"></a>AverHR</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AverHR &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
</UL>

<P><STRONG><a name="[295]"></a>ADget</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ADget &rArr; ADBufferRead &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRLS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferRead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADBufferStatus
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMCSSampling
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
</UL>

<P><STRONG><a name="[296]"></a>getShishiLiuliang</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeasureValue
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[189]"></a>NomalMeasure</STRONG> (Thumb, 1834 bytes, Stack size 64 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = NomalMeasure &rArr; WriteData32 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADValue
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDatChange
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSysDatChange
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeasureValue
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADget
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverHR
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverL
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverP
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverT
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRangeSel
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
</UL>

<P><STRONG><a name="[393]"></a>SelfCheak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fpga_contorl.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>yajingMoto</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = yajingMoto &rArr; TTLOutput &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[237]"></a>songkaiMoto</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = songkaiMoto &rArr; TTLOutput &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[194]"></a>RunPaperStep</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RunPaperStep &rArr; songkaiMoto &rArr; TTLOutput &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotary
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtrl
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
</UL>

<P><STRONG><a name="[29f]"></a>FindMin</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>

<P><STRONG><a name="[19a]"></a>MeasureStep</STRONG> (Thumb, 2940 bytes, Stack size 80 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MeasureStep &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData32
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100uS
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecordFlash
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDatChange
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRangeSel
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
</UL>

<P><STRONG><a name="[19c]"></a>FujiStep</STRONG> (Thumb, 746 bytes, Stack size 64 bytes, fpga_contorl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FujiStep &rArr; TTLOutput &rArr; CheackDat &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
</UL>

<P><STRONG><a name="[204]"></a>SPIInit</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPIInit &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[2b6]"></a>DelayAD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPIRcvByte
</UL>

<P><STRONG><a name="[2a9]"></a>Send_Byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Send_Byte &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_WR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_64k
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_1sec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
</UL>

<P><STRONG><a name="[2aa]"></a>Get_Byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Byte &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_WR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_64k
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase_1sec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
</UL>

<P><STRONG><a name="[25e]"></a>SSTF016B_RD</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSTF016B_RD &rArr; Get_Byte &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysRecord
</UL>

<P><STRONG><a name="[230]"></a>SSTF016B_WR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSTF016B_WR &rArr; Get_Byte &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecordFlash
</UL>

<P><STRONG><a name="[2ab]"></a>flash_chip_erase</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[2ac]"></a>MX25L1602_RdID</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[2ad]"></a>SSTF016B_Erase_1sec</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[2ae]"></a>SSTF016B_Erase_64k</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[1fa]"></a>SSTF016B_Erase</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SSTF016B_Erase &rArr; Get_Byte &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSysRecord
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineFristRun
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecordFlash
</UL>

<P><STRONG><a name="[2a6]"></a>FlashDatChange</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlashDatChange &rArr; FloatToChArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToChArray
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
</UL>

<P><STRONG><a name="[20a]"></a>FlashSysDatChange</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashSysDatChange
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[2f0]"></a>eMBRegInputCB</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[2ef]"></a>eMBRegHoldingCB</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[2af]"></a>eMBRegCoilsCB</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[2b2]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[394]"></a>ModbusRegInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>FindOriginalDat</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, measure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[1fd]"></a>SetCaliDat</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetCaliDat
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
</UL>

<P><STRONG><a name="[395]"></a>LoadK</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, measure.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>GetADValue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetADValue &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMenu
</UL>

<P><STRONG><a name="[298]"></a>GetMeasureValue</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetMeasureValue &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
</UL>

<P><STRONG><a name="[23b]"></a>Calibration</STRONG> (Thumb, 6058 bytes, Stack size 88 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Calibration &rArr; DisValue &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCaliParTime
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[23c]"></a>Calibration2</STRONG> (Thumb, 3112 bytes, Stack size 104 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Calibration2 &rArr; DisValue &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yajingMoto
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountCtrl
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdata
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[396]"></a>DelayNS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>SPIInit_w5100</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPIInit_w5100 &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[2b4]"></a>MSPISendData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>

<P><STRONG><a name="[2b5]"></a>MSPIRcvByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSPIRcvByte &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayAD
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>

<P><STRONG><a name="[2b7]"></a>Read_W5100</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_W5100 &rArr; MSPIRcvByte &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPIRcvByte
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPISendData
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Interrupt_Process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_rx_process
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
</UL>

<P><STRONG><a name="[19e]"></a>Write_W5100</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPISendData
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Interrupt_Process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_rx_process
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
</UL>

<P><STRONG><a name="[208]"></a>W5100_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W5100_Init &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay__
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[209]"></a>Socket_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Socket_Init &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay__
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[2b9]"></a>Socket_Connect</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>

<P><STRONG><a name="[1a0]"></a>Socket_Listen</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Socket_Listen &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
</UL>

<P><STRONG><a name="[2ba]"></a>Socket_UDP</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>

<P><STRONG><a name="[1a1]"></a>S_rx_process</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = S_rx_process &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
</UL>

<P><STRONG><a name="[2bb]"></a>S_tx_process</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = S_tx_process &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintString
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
</UL>

<P><STRONG><a name="[2bc]"></a>vPrintString</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
</UL>

<P><STRONG><a name="[19f]"></a>W5100_Interrupt_Process</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W5100_Interrupt_Process &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5100
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
</UL>

<P><STRONG><a name="[2a7]"></a>WriteRecordFlash</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WriteRecordFlash &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_WR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
</UL>

<P><STRONG><a name="[2bd]"></a>WriteRecord</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFp32
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData16
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_WriteByte
</UL>

<P><STRONG><a name="[2be]"></a>ReadRecord</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData16
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>

<P><STRONG><a name="[242]"></a>ReadFlashRecordSimple</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ReadFlashRecordSimple &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChArrayToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[2bf]"></a>ReadRecordSimple</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData16
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>

<P><STRONG><a name="[2c0]"></a>ReadRecordDetail</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFp32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData16
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1025_ReadByte
</UL>

<P><STRONG><a name="[2c1]"></a>RangePrompt</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, keyshow.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disppb_En1616
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CReverseVideo
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>

<P><STRONG><a name="[246]"></a>DealYMD</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DealYMD &rArr; StrCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[24d]"></a>DealIP</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DealIP &rArr; StrCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpIp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownIp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[247]"></a>DealHMS</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DealHMS &rArr; StrCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[224]"></a>ShowRecord2</STRONG> (Thumb, 878 bytes, Stack size 40 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ShowRecord2 &rArr; DisValue &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[225]"></a>ShowRecordDetail</STRONG> (Thumb, 772 bytes, Stack size 80 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ShowRecordDetail &rArr; DisValue &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[245]"></a>ShowSysRecord</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ShowSysRecord &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisDate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[249]"></a>SetEnterTime</STRONG> (Thumb, 944 bytes, Stack size 8 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SetEnterTime &rArr; EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prompt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EscKeyAutoPorc
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
</UL>

<P><STRONG><a name="[22a]"></a>SetDownTime</STRONG> (Thumb, 1228 bytes, Stack size 16 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SetDownTime &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealYMD
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealHMS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
</UL>

<P><STRONG><a name="[250]"></a>SetRightIp</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SetRightIp &rArr; ReverseVideo &rArr; LcdWriteByte &rArr; LcdReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
</UL>

<P><STRONG><a name="[2c5]"></a>ProIpDat</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ProIpDat &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpIp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownIp
</UL>

<P><STRONG><a name="[228]"></a>SetUpIp</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SetUpIp &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealIP
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProIpDat
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[22b]"></a>SetDownIp</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SetDownIp &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealIP
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProIpDat
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
</UL>

<P><STRONG><a name="[226]"></a>SetUpTime</STRONG> (Thumb, 1242 bytes, Stack size 16 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SetUpTime &rArr; DisCList16 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseVideo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealYMD
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealHMS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanVideo
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[2c7]"></a>getDatLenth</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, keyshow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
</UL>

<P><STRONG><a name="[223]"></a>LoadSensorDat</STRONG> (Thumb, 1028 bytes, Stack size 64 bytes, keyshow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoadSensorDat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatLenth
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[2c8]"></a>sendchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2ca]"></a>getkey</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[64]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2c9]"></a>fgetc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[317]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2cb]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[7c]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[2cf]"></a>Modbus_CRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mb_rtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModbusMessage
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T15EndHandle
</UL>

<P><STRONG><a name="[2cc]"></a>Waite10mS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mbcommon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start10mS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[1d6]"></a>Time10mSHandle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Time10mSHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T10ms_Exception
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[2ce]"></a>T15EndHandle</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T15EndHandle &rArr; Modbus_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T15_Exception
</UL>

<P><STRONG><a name="[2d0]"></a>T35EndHandle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = T35EndHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T35_Exception
</UL>

<P><STRONG><a name="[1cd]"></a>ReceOneChar</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReceOneChar &rArr; StartCountT35 &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT35
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCountT15
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntReceive
</UL>

<P><STRONG><a name="[2de]"></a>PutDataInPUD</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mbcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutDataInPUD
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteMultipleReg2PDU
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskWriteReg2PDU
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleReg2PDU
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleCoils2PDU
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleRegPDU
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleCoil2PDU
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOper2PDU
</UL>

<P><STRONG><a name="[2d3]"></a>OSReadCoils</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[2d5]"></a>OSReadDisInputs</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[1ad]"></a>OSReadHoldReg</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
</UL>

<P><STRONG><a name="[2d6]"></a>OSReadInputReg</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[2d7]"></a>OSWriteSingleCoil</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[2d8]"></a>OSWriteSingleReg</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOutput
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testboard
</UL>

<P><STRONG><a name="[2d9]"></a>OSWriteMultipleCoils</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[2da]"></a>OSWriteMultipleReg</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputCONC
</UL>

<P><STRONG><a name="[2db]"></a>OSMaskWriteReg</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[2dc]"></a>OSReadWriteMultipleReg</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, osfunfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPoll
</UL>

<P><STRONG><a name="[397]"></a>Test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_mfunction.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>Test2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_mfunction.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>ReadOper2PDU</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadOper2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputReg2PDU
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHoldReg2PDU
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteInputs2PDU
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCoils2PDU
</UL>

<P><STRONG><a name="[15]"></a>ReadRegPRASD</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadRegPRASD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ReadDiscretePRASD</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadDiscretePRASD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>NoDataPRASD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_mfunction.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ReadCoils2PDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadCoils2PDU &rArr; ReadOper2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOper2PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ReadDiscreteInputs2PDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadDiscreteInputs2PDU &rArr; ReadOper2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOper2PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ReadHoldReg2PDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadHoldReg2PDU &rArr; ReadOper2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOper2PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ReadInputReg2PDU</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadInputReg2PDU &rArr; ReadOper2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOper2PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>WriteSingleCoil2PDU</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteSingleCoil2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>WriteSingleRegPDU</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteSingleRegPDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>WriteMultipleCoils2PDU</STRONG> (Thumb, 124 bytes, Stack size 280 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WriteMultipleCoils2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>WriteMultipleReg2PDU</STRONG> (Thumb, 120 bytes, Stack size 272 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WriteMultipleReg2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>MaskWriteReg2PDU</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MaskWriteReg2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ReadWriteMultipleReg2PDU</STRONG> (Thumb, 148 bytes, Stack size 272 bytes, mb_mfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ReadWriteMultipleReg2PDU &rArr; PutDataInPUD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataInPUD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_mfunction.o(.data)
</UL>
<P><STRONG><a name="[1ff]"></a>MBMasterIni</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbmaster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MBMasterIni &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
</UL>

<P><STRONG><a name="[2d4]"></a>ModbusPoll</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mbmaster.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSReadHoldReg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSReadWriteMultipleReg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMaskWriteReg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteMultipleReg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteMultipleCoils
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteSingleReg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteSingleCoil
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSReadInputReg
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSReadDisInputs
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSReadCoils
</UL>

<P><STRONG><a name="[2e1]"></a>ParseReponseAndStoreData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mbmaster.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[2df]"></a>CheckModbusMessage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mbmaster.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[1b2]"></a>IdleModbus</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, mbmaster.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModbusMessage
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReponseAndStoreData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waite10mS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSModbusServe
</UL>

<P><STRONG><a name="[2e0]"></a>SendResponse</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, syshal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleModbus
</UL>

<P><STRONG><a name="[2d2]"></a>StartCountT15</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, syshal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartCountT15 &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceOneChar
</UL>

<P><STRONG><a name="[2d1]"></a>StartCountT35</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, syshal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartCountT35 &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceOneChar
</UL>

<P><STRONG><a name="[2cd]"></a>Start10mS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, syshal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waite10mS
</UL>

<P><STRONG><a name="[1d9]"></a>T15_Exception</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syshal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T15_Exception &rArr; T15EndHandle &rArr; Modbus_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T15EndHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProc
</UL>

<P><STRONG><a name="[1da]"></a>T35_Exception</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syshal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = T35_Exception &rArr; T35EndHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T35EndHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProc
</UL>

<P><STRONG><a name="[1db]"></a>T10ms_Exception</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syshal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = T10ms_Exception &rArr; Time10mSHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time10mSHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProc
</UL>

<P><STRONG><a name="[2e2]"></a>TimersInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, syshal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
</UL>

<P><STRONG><a name="[2e3]"></a>IniUART1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, syshal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
</UL>

<P><STRONG><a name="[2e4]"></a>testboard</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, output.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteSingleReg
</UL>

<P><STRONG><a name="[2e5]"></a>DigitalOutput</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, output.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteSingleReg
</UL>

<P><STRONG><a name="[2e6]"></a>OutputCONC</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, output.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSWriteMultipleReg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[18e]"></a>ReadHistory</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ReadHistory &rArr; ReadFlashRecordSimple &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
</UL>

<P><STRONG><a name="[18f]"></a>ReadHistoryM</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadHistoryM &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
</UL>

<P><STRONG><a name="[2c4]"></a>ReadSysRecord</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ReadSysRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSTF016B_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistorySysMin
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistorySys
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSysRecord
</UL>

<P><STRONG><a name="[190]"></a>ReadHistorySys</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ReadHistorySys &rArr; ReadSysRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
</UL>

<P><STRONG><a name="[192]"></a>ReadHistorySysMin</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ReadHistorySysMin &rArr; ReadSysRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
</UL>

<P><STRONG><a name="[191]"></a>ReadHistoryDat</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ReadHistoryDat &rArr; ReadFlashRecordSimple &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashRecordSimple
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
</UL>

<P><STRONG><a name="[1a7]"></a>eMBInit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; Uart2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[1a6]"></a>eMBTCPInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBTCPInit &rArr; eMBTCPDoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPDoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[2ea]"></a>eMBRegisterCB</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>

<P><STRONG><a name="[399]"></a>eMBClose</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>eMBEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[39a]"></a>eMBDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>eMBPoll</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
</UL>

<P><STRONG><a name="[1d]"></a>eMBFuncReadCoils</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mbfunccoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mbfunccoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, mbfunccoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, mbfuncdisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncinput.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2f1]"></a>eMBSetSlaveID</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mbfuncother.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[17]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2b1]"></a>xMBUtilSetBits</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, mbutils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[2b0]"></a>xMBUtilGetBits</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mbutils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[2ee]"></a>prveMBError2Exception</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbutils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[2e9]"></a>eMBTCPDoInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mbtcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBTCPDoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
</UL>

<P><STRONG><a name="[60]"></a>eMBTCPStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbtcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>eMBTCPStop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbtcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBTCPStop
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBTCPPortDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>eMBTCPReceive</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mbtcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBTCPReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortGetRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>eMBTCPSend</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, mbtcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eMBTCPSend &rArr; xMBTCPPortSendResponse &rArr; S_tx_process &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[2f3]"></a>xMBTCPPortInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, porttcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPDoInit
</UL>

<P><STRONG><a name="[39b]"></a>vMBTCPPortClose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, porttcp.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>vMBTCPPortDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, porttcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPStop
</UL>

<P><STRONG><a name="[2f5]"></a>xMBTCPPortGetRequest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, porttcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPReceive
</UL>

<P><STRONG><a name="[2f6]"></a>xMBTCPPortSendResponse</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, porttcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xMBTCPPortSendResponse &rArr; S_tx_process &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_tx_process
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPSend
</UL>

<P><STRONG><a name="[2f7]"></a>xMBPortTimersInit</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xMBPortTimersInit &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[2f8]"></a>vMBPortTimersEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vMBPortTimersEnable &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[2f9]"></a>vMBPortTimersDisable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vMBPortTimersDisable &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[2fa]"></a>TIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[2f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, porttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER3_IRQHandler &rArr; TIM_ClearIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e8]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1a2]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModbusSlave
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[2ed]"></a>xMBPortEventGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1c6]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[2fb]"></a>vMBPortSerialEnable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vMBPortSerialEnable &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[2fc]"></a>vMBPortClose</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, portserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>

<P><STRONG><a name="[2fd]"></a>xMBPortSerialInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xMBPortSerialInit &rArr; Uart2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[2fe]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, portserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[2ff]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBPortSerialGetByte &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[1c5]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>eMBRTUInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; Uart2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[59]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRTUStop &rArr; vMBPortSerialEnable &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>eMBRTUReceive</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>eMBRTUSend</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = eMBRTUSend &rArr; vMBPortSerialEnable &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xMBRTUReceiveFSM &rArr; vMBPortTimersEnable &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xMBRTUTransmitFSM &rArr; UART2Send &rArr; UART2_IntTransmit &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBRTUTimerT35Expired &rArr; vMBPortTimersDisable &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[300]"></a>usMBCRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mbcrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[2a2]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
</UL>

<P><STRONG><a name="[2a3]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[39c]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
</UL>

<P><STRONG><a name="[304]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
</UL>

<P><STRONG><a name="[306]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[39d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisPleaseWait
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyWord1212
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[39e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCode1212
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCList16
</UL>

<P><STRONG><a name="[3a1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[308]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6d]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[30a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[30d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3a4]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[303]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3a5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3a6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[3a7]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[313]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[316]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[315]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[30f]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[309]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[73]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[78]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[319]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[318]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[31d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[310]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[31f]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[31e]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[320]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[321]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[311]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[312]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[322]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[314]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[323]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[2a5]"></a>log</STRONG> (Thumb, 822 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
</UL>

<P><STRONG><a name="[2b3]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
</UL>

<P><STRONG><a name="[71]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
</UL>

<P><STRONG><a name="[326]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProIpDat
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[329]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[32c]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[330]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryM
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[32e]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2c2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[32f]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[29e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
</UL>

<P><STRONG><a name="[331]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2c6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryM
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProIpDat
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputCONC
</UL>

<P><STRONG><a name="[332]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProIpDat
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3a9]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[29c]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProIpDat
</UL>

<P><STRONG><a name="[3aa]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
</UL>

<P><STRONG><a name="[333]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[336]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputCONC
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[334]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[328]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[32b]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
</UL>

<P><STRONG><a name="[335]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[337]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[325]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[339]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSta
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuSen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputCONC
</UL>

<P><STRONG><a name="[33a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_HistoryMemoryRead
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalculateAverageCnt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageSelectFp
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeasureValue
</UL>

<P><STRONG><a name="[33c]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[340]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DataGather_PineTempCtrl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Refresh_Lcd_AnalogOutput
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalculateAverageCnt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageSelectFp
</UL>

<P><STRONG><a name="[33e]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMin
</UL>

<P><STRONG><a name="[33f]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
</UL>

<P><STRONG><a name="[341]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalculateAverageCnt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverHR
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverL
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverP
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverT
</UL>

<P><STRONG><a name="[342]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStation
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageSelectFp
</UL>

<P><STRONG><a name="[3ab]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCountDat
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovingAverage
</UL>

<P><STRONG><a name="[3ac]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[19b]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalculateAverageCnt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecordDetail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRecord2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangePrompt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMin
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputCONC
</UL>

<P><STRONG><a name="[343]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[346]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_DTU
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Meas
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADValue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue2
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;songkaiMoto
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSensorDat
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcEnterKey
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeasureValue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getShishiLiuliang
</UL>

<P><STRONG><a name="[344]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[33b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[327]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisConfigStateValue
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPro
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcDownKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcUpKey
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComeBackConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageSelectFp
</UL>

<P><STRONG><a name="[345]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration
</UL>

<P><STRONG><a name="[347]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[32d]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[324]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[349]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[93]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[99]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[a9]"></a>I2C_getNum</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferComplete
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferComplete
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[ad]"></a>I2C_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[aa]"></a>I2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[ae]"></a>I2C_SendByte</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[af]"></a>I2C_GetByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[9e]"></a>I2C_SetClock</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SetClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[a7]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[b8]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[b9]"></a>set_ResistorMode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[ba]"></a>set_OpenDrainMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[ce]"></a>getPClock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getPClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[cf]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[d6]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[de]"></a>uart_set_divisors</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fd]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[108]"></a>OS_InitTaskStat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10c]"></a>OS_InitTaskIdle</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10d]"></a>OS_InitEventList</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10f]"></a>OS_InitTCBList</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[113]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[112]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[12a]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[130]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[147]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSMutex_RdyAtPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[171]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[174]"></a>OSTmr_Free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[173]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[179]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[51]"></a>OSTmr_Task</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>OSTmr_InitTask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[57]"></a>AppTask_Refresh_Lcd_AnalogOutput</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AppTask_Refresh_Lcd_AnalogOutput &rArr; Menm0Updata &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menm0Updata
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>AppTask_DataGather_PineTempCtrl</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = AppTask_DataGather_PineTempCtrl &rArr; NomalMeasure &rArr; WriteData32 &rArr; C1025_WriteByte &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NomalMeasure
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRead
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>AppTask_HistoryMemoryRead</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AppTask_HistoryMemoryRead &rArr; NewLcdVol &rArr; showCountDat &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistorySysMin
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistorySys
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistoryDat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewLcdVol
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>AppTask_Meas</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = AppTask_Meas &rArr; MeasureStep &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTLOutput
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPaperStep
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureStep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FujiStep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutSetOne
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAMCSOutPutAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>AppTask_Kbd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = AppTask_Kbd &rArr; PorcKey &rArr; PorcEnterKey &rArr; SetEnterTime &rArr; EscKeyAutoPorc &rArr; MainMenuSen2 &rArr; DisValue2 &rArr; WriteCode1212 &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PorcKey
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>AppTask_ModbusSlave</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = AppTask_ModbusSlave &rArr; S_rx_process &rArr; Write_W5100 &rArr; MSPISendData &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5100
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Interrupt_Process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_rx_process
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1a4]"></a>AppTask_Create</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = AppTask_Create &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Start
</UL>

<P><STRONG><a name="[58]"></a>AppTask_Start</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = AppTask_Start &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; Uart2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerCtrl
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1ac]"></a>AppTask_DTU</STRONG> (Thumb, 508 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSReadHoldReg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[1b0]"></a>AppTask_SHELL</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[1b6]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[1b7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uarts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[1d2]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[1d3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, times.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[2a1]"></a>FindTheOrderGuy</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalculateAverageCnt
</UL>

<P><STRONG><a name="[2a4]"></a>ReCalculateAverageCnt</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, fpga_contorl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTheOrderGuy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2b8]"></a>Delay__</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
</UL>

<P><STRONG><a name="[338]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[32a]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[348]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[33d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[30e]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[65]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
